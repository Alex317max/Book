{"ast":null,"code":"// src/api.js\n//const API_URL = 'https://bookingdasb.onrender.com'; // Или ваш локальный URL для тестов (путь к серверу, если он на внешнем хостинге)\n//const API_URL = 'https://mail.is1c.ru:8000'; //не работает - это проблема самый кринге\n//const API_URL = 'http://10.27.27.91:8000'; //работает если бэк и фронт на одном компе запустить(не наодном компе тоже работает но в локалке)\nconst API_URL = 'http://37.192.242.74:8000';\nconst getTelegramUserData = () => {\n  var _window$Telegram, _window$Telegram$WebA, _window$Telegram$WebA2;\n  return ((_window$Telegram = window.Telegram) === null || _window$Telegram === void 0 ? void 0 : (_window$Telegram$WebA = _window$Telegram.WebApp) === null || _window$Telegram$WebA === void 0 ? void 0 : (_window$Telegram$WebA2 = _window$Telegram$WebA.initDataUnsafe) === null || _window$Telegram$WebA2 === void 0 ? void 0 : _window$Telegram$WebA2.user) || {\n    id: 123456789\n  }; // Заглушка для тестов (запуску вне тг)\n};\nconst getTgId = () => {\n  return getTelegramUserData().id;\n};\n\n// --- Функции для профиля пользователя ---\nexport const fetchUserProfile = async () => {\n  const tgUser = getTelegramUserData();\n  const params = new URLSearchParams({\n    tg_id: tgUser.id\n  });\n  if (tgUser.username) params.append('tg_username', tgUser.username);\n  if (tgUser.first_name) params.append('tg_first_name', tgUser.first_name);\n  if (tgUser.last_name) params.append('tg_last_name', tgUser.last_name);\n  const response = await fetch(`${API_URL}/users/profile?${params.toString()}`);\n  if (!response.ok) {\n    const error = await response.json().catch(() => ({}));\n    throw new Error(error.detail || 'Ошибка загрузки профиля пользователя');\n  }\n  return await response.json(); // Ожидаем UserProfileResponse\n};\nexport const updateUserProfile = async displayName => {\n  const tgUser = getTelegramUserData();\n  const response = await fetch(`${API_URL}/users/profile`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      tg_id: tgUser.id,\n      display_name: displayName,\n      // Передаем актуальные данные из Telegram, если они могли измениться\n      telegram_username: tgUser.username,\n      telegram_first_name: tgUser.first_name,\n      telegram_last_name: tgUser.last_name\n    })\n  });\n  if (!response.ok) {\n    const error = await response.json().catch(() => ({}));\n    throw new Error(error.detail || 'Ошибка обновления профиля');\n  }\n  return await response.json(); // Ожидаем UserProfileResponse\n};\n\n// --- Основные функции бронирования ---\nexport const fetchOffices = async () => {\n  const response = await fetch(`${API_URL}/offices`);\n  if (!response.ok) throw new Error('Ошибка загрузки офисов');\n  return await response.json();\n};\nexport const fetchDesks = async (officeId, date) => {\n  const dateStr = date.toISOString().split('T')[0];\n  const response = await fetch(`${API_URL}/desks/${officeId}?date_str=${dateStr}`);\n  if (!response.ok) {\n    const error = await response.json().catch(() => ({}));\n    throw new Error(error.detail || 'Ошибка загрузки столов');\n  }\n  const desks = await response.json();\n  // Ответ теперь содержит user_display_name вместо tg_id в availability_slots\n  // { id, ..., availability_slots: { AM: {status, user_display_name}, PM: {status, user_display_name} } }\n  return desks;\n};\nexport const bookDesk = async (deskId, date, timeSlot) => {\n  const tgUser = getTelegramUserData();\n  const response = await fetch(`${API_URL}/book`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      desk_id: parseInt(deskId),\n      tg_id: tgUser.id,\n      booking_date: date.toISOString().split('T')[0],\n      time_slot: timeSlot,\n      // Передаем данные Telegram для get_or_create_user на бэкенде\n      telegram_username: tgUser.username,\n      telegram_first_name: tgUser.first_name,\n      telegram_last_name: tgUser.last_name\n    })\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.detail || 'Ошибка бронирования');\n  }\n  // Бэкенд теперь возвращает BookingResponse с user_display_name\n  return await response.json();\n};\nexport const fetchUserBookings = async (startDate = null, endDate = null) => {\n  let url = `${API_URL}/my-bookings?tg_id=${getTgId()}`;\n  if (startDate) url += `&start_date=${startDate.toISOString().split('T')[0]}`;\n  if (endDate) url += `&end_date=${endDate.toISOString().split('T')[0]}`;\n  const response = await fetch(url);\n  if (!response.ok) throw new Error('Ошибка загрузки бронирований');\n  // Бэкенд возвращает BookingResponse с user_display_name\n  return await response.json();\n};\nexport const cancelUserBooking = async bookingId => {\n  const response = await fetch(`${API_URL}/cancel-booking`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      booking_id: parseInt(bookingId),\n      tg_id: getTgId() // tg_id нужен для проверки прав на отмену\n    })\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.detail || 'Ошибка отмены бронирования');\n  }\n  return true;\n};\n\n// --- Админские функции ---\n// Передаем tg_id админа как параметр запроса\nconst getAdminTgIdParam = () => `tg_id_admin=${getTgId()}`;\nexport const addNewDesk = async (officeId, deskName) => {\n  const response = await fetch(`${API_URL}/admin/add-desk?${getAdminTgIdParam()}`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      office_id: parseInt(officeId),\n      desk_name: deskName\n      // tg_id убран из тела, так как передается в параметрах для проверки админа\n    })\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.detail || 'Ошибка добавления стола');\n  }\n  return await response.json();\n};\nexport const deleteDesk = async deskId => {\n  const response = await fetch(`${API_URL}/admin/remove-desk?${getAdminTgIdParam()}`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      desk_id: parseInt(deskId)\n    })\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.detail || 'Ошибка удаления стола');\n  }\n  return true;\n};\nexport const addNewOffice = async officeName => {\n  const response = await fetch(`${API_URL}/admin/add-office?${getAdminTgIdParam()}`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      name: officeName\n    })\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.detail || 'Ошибка добавления офиса');\n  }\n  return await response.json();\n};\nexport const deleteOffice = async officeId => {\n  const response = await fetch(`${API_URL}/admin/remove-office?${getAdminTgIdParam()}`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      office_id: parseInt(officeId)\n    })\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.detail || 'Ошибка удаления офиса');\n  }\n  return true;\n};\nexport const fetchAdminDesks = async () => {\n  const url = `${API_URL}/admin/desks?${getAdminTgIdParam()}`;\n  const response = await fetch(url);\n  if (!response.ok) throw new Error('Ошибка загрузки столов для админа');\n  // Ответ AdminDeskResponse не содержит status, но содержит office_name\n  return await response.json();\n};","map":{"version":3,"names":["API_URL","getTelegramUserData","_window$Telegram","_window$Telegram$WebA","_window$Telegram$WebA2","window","Telegram","WebApp","initDataUnsafe","user","id","getTgId","fetchUserProfile","tgUser","params","URLSearchParams","tg_id","username","append","first_name","last_name","response","fetch","toString","ok","error","json","catch","Error","detail","updateUserProfile","displayName","method","headers","body","JSON","stringify","display_name","telegram_username","telegram_first_name","telegram_last_name","fetchOffices","fetchDesks","officeId","date","dateStr","toISOString","split","desks","bookDesk","deskId","timeSlot","desk_id","parseInt","booking_date","time_slot","fetchUserBookings","startDate","endDate","url","cancelUserBooking","bookingId","booking_id","getAdminTgIdParam","addNewDesk","deskName","office_id","desk_name","deleteDesk","addNewOffice","officeName","name","deleteOffice","fetchAdminDesks"],"sources":["C:/Users/A.Ryazanov/book_test/front/src/api.js"],"sourcesContent":["// src/api.js\n//const API_URL = 'https://bookingdasb.onrender.com'; // Или ваш локальный URL для тестов (путь к серверу, если он на внешнем хостинге)\n//const API_URL = 'https://mail.is1c.ru:8000'; //не работает - это проблема самый кринге\n//const API_URL = 'http://10.27.27.91:8000'; //работает если бэк и фронт на одном компе запустить(не наодном компе тоже работает но в локалке)\nconst API_URL = 'http://37.192.242.74:8000';\nconst getTelegramUserData = () => {\n  return window.Telegram?.WebApp?.initDataUnsafe?.user || { id: 123456789 }; // Заглушка для тестов (запуску вне тг)\n};\n\nconst getTgId = () => {\n  return getTelegramUserData().id;\n};\n\n// --- Функции для профиля пользователя ---\nexport const fetchUserProfile = async () => {\n  const tgUser = getTelegramUserData();\n  const params = new URLSearchParams({\n    tg_id: tgUser.id,\n  });\n  if (tgUser.username) params.append('tg_username', tgUser.username);\n  if (tgUser.first_name) params.append('tg_first_name', tgUser.first_name);\n  if (tgUser.last_name) params.append('tg_last_name', tgUser.last_name);\n\n  const response = await fetch(`${API_URL}/users/profile?${params.toString()}`);\n  if (!response.ok) {\n    const error = await response.json().catch(() => ({}));\n    throw new Error(error.detail || 'Ошибка загрузки профиля пользователя');\n  }\n  return await response.json(); // Ожидаем UserProfileResponse\n};\n\nexport const updateUserProfile = async (displayName) => {\n  const tgUser = getTelegramUserData();\n  const response = await fetch(`${API_URL}/users/profile`, {\n    method: 'PUT',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({\n      tg_id: tgUser.id,\n      display_name: displayName,\n      // Передаем актуальные данные из Telegram, если они могли измениться\n      telegram_username: tgUser.username,\n      telegram_first_name: tgUser.first_name,\n      telegram_last_name: tgUser.last_name,\n    }),\n  });\n  if (!response.ok) {\n    const error = await response.json().catch(() => ({}));\n    throw new Error(error.detail || 'Ошибка обновления профиля');\n  }\n  return await response.json(); // Ожидаем UserProfileResponse\n};\n\n\n// --- Основные функции бронирования ---\nexport const fetchOffices = async () => {\n  const response = await fetch(`${API_URL}/offices`);\n  if (!response.ok) throw new Error('Ошибка загрузки офисов');\n  return await response.json();\n};\n\nexport const fetchDesks = async (officeId, date) => {\n  const dateStr = date.toISOString().split('T')[0];\n  const response = await fetch(`${API_URL}/desks/${officeId}?date_str=${dateStr}`); \n  if (!response.ok) {\n    const error = await response.json().catch(() => ({}));\n    throw new Error(error.detail || 'Ошибка загрузки столов');\n  }\n  const desks = await response.json();\n  // Ответ теперь содержит user_display_name вместо tg_id в availability_slots\n  // { id, ..., availability_slots: { AM: {status, user_display_name}, PM: {status, user_display_name} } }\n  return desks; \n};\n\nexport const bookDesk = async (deskId, date, timeSlot) => {\n  const tgUser = getTelegramUserData();\n  const response = await fetch(`${API_URL}/book`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({\n      desk_id: parseInt(deskId),\n      tg_id: tgUser.id,\n      booking_date: date.toISOString().split('T')[0],\n      time_slot: timeSlot,\n      // Передаем данные Telegram для get_or_create_user на бэкенде\n      telegram_username: tgUser.username,\n      telegram_first_name: tgUser.first_name,\n      telegram_last_name: tgUser.last_name,\n    })\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.detail || 'Ошибка бронирования');\n  }\n  // Бэкенд теперь возвращает BookingResponse с user_display_name\n  return await response.json(); \n};\n\nexport const fetchUserBookings = async (startDate = null, endDate = null) => {\n  let url = `${API_URL}/my-bookings?tg_id=${getTgId()}`;\n  if (startDate) url += `&start_date=${startDate.toISOString().split('T')[0]}`;\n  if (endDate) url += `&end_date=${endDate.toISOString().split('T')[0]}`;\n\n  const response = await fetch(url);\n  if (!response.ok) throw new Error('Ошибка загрузки бронирований');\n  // Бэкенд возвращает BookingResponse с user_display_name\n  return await response.json(); \n};\n\nexport const cancelUserBooking = async (bookingId) => {\n  const response = await fetch(`${API_URL}/cancel-booking`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({\n      booking_id: parseInt(bookingId),\n      tg_id: getTgId() // tg_id нужен для проверки прав на отмену\n    })\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.detail || 'Ошибка отмены бронирования');\n  }\n  return true;\n};\n\n// --- Админские функции ---\n// Передаем tg_id админа как параметр запроса\nconst getAdminTgIdParam = () => `tg_id_admin=${getTgId()}`;\n\nexport const addNewDesk = async (officeId, deskName) => {\n  const response = await fetch(`${API_URL}/admin/add-desk?${getAdminTgIdParam()}`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({\n      office_id: parseInt(officeId),\n      desk_name: deskName,\n      // tg_id убран из тела, так как передается в параметрах для проверки админа\n    })\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.detail || 'Ошибка добавления стола');\n  }\n  return await response.json();\n};\n\nexport const deleteDesk = async (deskId) => {\n  const response = await fetch(`${API_URL}/admin/remove-desk?${getAdminTgIdParam()}`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({\n      desk_id: parseInt(deskId),\n    })\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.detail || 'Ошибка удаления стола');\n  }\n  return true;\n};\n\nexport const addNewOffice = async (officeName) => {\n  const response = await fetch(`${API_URL}/admin/add-office?${getAdminTgIdParam()}`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({\n      name: officeName,\n    })\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.detail || 'Ошибка добавления офиса');\n  }\n  return await response.json();\n};\n\nexport const deleteOffice = async (officeId) => {\n  const response = await fetch(`${API_URL}/admin/remove-office?${getAdminTgIdParam()}`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({\n      office_id: parseInt(officeId),\n    })\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.detail || 'Ошибка удаления офиса');\n  }\n  return true;\n};\n\nexport const fetchAdminDesks = async () => {\n  const url = `${API_URL}/admin/desks?${getAdminTgIdParam()}`;\n  const response = await fetch(url);\n  if (!response.ok) throw new Error('Ошибка загрузки столов для админа');\n  // Ответ AdminDeskResponse не содержит status, но содержит office_name\n  return await response.json();\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}