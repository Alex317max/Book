{"ast":null,"code":"// src/api.js\n//const API_URL = 'https://bookingdasb.onrender.com'; // Или ваш локальный URL для тестов (путь к серверу)\nconst API_URL='https://mail.is1c.ru:8000';//не работает - это проблема\n//const API_URL = 'http://127.0.0.1:8000'; //работает если бэк и фронт на одном компе запустить\nconst getTelegramUserData=()=>{var _window$Telegram,_window$Telegram$WebA,_window$Telegram$WebA2;return((_window$Telegram=window.Telegram)===null||_window$Telegram===void 0?void 0:(_window$Telegram$WebA=_window$Telegram.WebApp)===null||_window$Telegram$WebA===void 0?void 0:(_window$Telegram$WebA2=_window$Telegram$WebA.initDataUnsafe)===null||_window$Telegram$WebA2===void 0?void 0:_window$Telegram$WebA2.user)||{id:123456789};// Заглушка для тестов (запуску вне тг)\n};const getTgId=()=>{return getTelegramUserData().id;};// --- Функции для профиля пользователя ---\nexport const fetchUserProfile=async()=>{const tgUser=getTelegramUserData();const params=new URLSearchParams({tg_id:tgUser.id});if(tgUser.username)params.append('tg_username',tgUser.username);if(tgUser.first_name)params.append('tg_first_name',tgUser.first_name);if(tgUser.last_name)params.append('tg_last_name',tgUser.last_name);const response=await fetch(`${API_URL}/users/profile?${params.toString()}`);if(!response.ok){const error=await response.json().catch(()=>({}));throw new Error(error.detail||'Ошибка загрузки профиля пользователя');}return await response.json();// Ожидаем UserProfileResponse\n};export const updateUserProfile=async displayName=>{const tgUser=getTelegramUserData();const response=await fetch(`${API_URL}/users/profile`,{method:'PUT',headers:{'Content-Type':'application/json'},body:JSON.stringify({tg_id:tgUser.id,display_name:displayName,// Передаем актуальные данные из Telegram, если они могли измениться\ntelegram_username:tgUser.username,telegram_first_name:tgUser.first_name,telegram_last_name:tgUser.last_name})});if(!response.ok){const error=await response.json().catch(()=>({}));throw new Error(error.detail||'Ошибка обновления профиля');}return await response.json();// Ожидаем UserProfileResponse\n};// --- Основные функции бронирования ---\nexport const fetchOffices=async()=>{const response=await fetch(`${API_URL}/offices`);if(!response.ok)throw new Error('Ошибка загрузки офисов');return await response.json();};export const fetchDesks=async(officeId,date)=>{const dateStr=date.toISOString().split('T')[0];const response=await fetch(`${API_URL}/desks/${officeId}?date_str=${dateStr}`);if(!response.ok){const error=await response.json().catch(()=>({}));throw new Error(error.detail||'Ошибка загрузки столов');}const desks=await response.json();// Ответ теперь содержит user_display_name вместо tg_id в availability_slots\n// { id, ..., availability_slots: { AM: {status, user_display_name}, PM: {status, user_display_name} } }\nreturn desks;};export const bookDesk=async(deskId,date,timeSlot)=>{const tgUser=getTelegramUserData();const response=await fetch(`${API_URL}/book`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({desk_id:parseInt(deskId),tg_id:tgUser.id,booking_date:date.toISOString().split('T')[0],time_slot:timeSlot,// Передаем данные Telegram для get_or_create_user на бэкенде\ntelegram_username:tgUser.username,telegram_first_name:tgUser.first_name,telegram_last_name:tgUser.last_name})});if(!response.ok){const error=await response.json();throw new Error(error.detail||'Ошибка бронирования');}// Бэкенд теперь возвращает BookingResponse с user_display_name\nreturn await response.json();};export const fetchUserBookings=async function(){let startDate=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;let endDate=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;let url=`${API_URL}/my-bookings?tg_id=${getTgId()}`;if(startDate)url+=`&start_date=${startDate.toISOString().split('T')[0]}`;if(endDate)url+=`&end_date=${endDate.toISOString().split('T')[0]}`;const response=await fetch(url);if(!response.ok)throw new Error('Ошибка загрузки бронирований');// Бэкенд возвращает BookingResponse с user_display_name\nreturn await response.json();};export const cancelUserBooking=async bookingId=>{const response=await fetch(`${API_URL}/cancel-booking`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({booking_id:parseInt(bookingId),tg_id:getTgId()// tg_id нужен для проверки прав на отмену\n})});if(!response.ok){const error=await response.json();throw new Error(error.detail||'Ошибка отмены бронирования');}return true;};// --- Админские функции ---\n// Передаем tg_id админа как параметр запроса\nconst getAdminTgIdParam=()=>`tg_id_admin=${getTgId()}`;export const addNewDesk=async(officeId,deskName)=>{const response=await fetch(`${API_URL}/admin/add-desk?${getAdminTgIdParam()}`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({office_id:parseInt(officeId),desk_name:deskName// tg_id убран из тела, так как передается в параметрах для проверки админа\n})});if(!response.ok){const error=await response.json();throw new Error(error.detail||'Ошибка добавления стола');}return await response.json();};export const deleteDesk=async deskId=>{const response=await fetch(`${API_URL}/admin/remove-desk?${getAdminTgIdParam()}`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({desk_id:parseInt(deskId)})});if(!response.ok){const error=await response.json();throw new Error(error.detail||'Ошибка удаления стола');}return true;};export const addNewOffice=async officeName=>{const response=await fetch(`${API_URL}/admin/add-office?${getAdminTgIdParam()}`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({name:officeName})});if(!response.ok){const error=await response.json();throw new Error(error.detail||'Ошибка добавления офиса');}return await response.json();};export const deleteOffice=async officeId=>{const response=await fetch(`${API_URL}/admin/remove-office?${getAdminTgIdParam()}`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({office_id:parseInt(officeId)})});if(!response.ok){const error=await response.json();throw new Error(error.detail||'Ошибка удаления офиса');}return true;};export const fetchAdminDesks=async()=>{const url=`${API_URL}/admin/desks?${getAdminTgIdParam()}`;const response=await fetch(url);if(!response.ok)throw new Error('Ошибка загрузки столов для админа');// Ответ AdminDeskResponse не содержит status, но содержит office_name\nreturn await response.json();};","map":{"version":3,"names":["API_URL","getTelegramUserData","_window$Telegram","_window$Telegram$WebA","_window$Telegram$WebA2","window","Telegram","WebApp","initDataUnsafe","user","id","getTgId","fetchUserProfile","tgUser","params","URLSearchParams","tg_id","username","append","first_name","last_name","response","fetch","toString","ok","error","json","catch","Error","detail","updateUserProfile","displayName","method","headers","body","JSON","stringify","display_name","telegram_username","telegram_first_name","telegram_last_name","fetchOffices","fetchDesks","officeId","date","dateStr","toISOString","split","desks","bookDesk","deskId","timeSlot","desk_id","parseInt","booking_date","time_slot","fetchUserBookings","startDate","arguments","length","undefined","endDate","url","cancelUserBooking","bookingId","booking_id","getAdminTgIdParam","addNewDesk","deskName","office_id","desk_name","deleteDesk","addNewOffice","officeName","name","deleteOffice","fetchAdminDesks"],"sources":["C:/Users/A.Ryazanov/book_test/front/src/api.js"],"sourcesContent":["// src/api.js\n//const API_URL = 'https://bookingdasb.onrender.com'; // Или ваш локальный URL для тестов (путь к серверу)\nconst API_URL = 'https://mail.is1c.ru:8000'; //не работает - это проблема\n//const API_URL = 'http://127.0.0.1:8000'; //работает если бэк и фронт на одном компе запустить\nconst getTelegramUserData = () => {\n  return window.Telegram?.WebApp?.initDataUnsafe?.user || { id: 123456789 }; // Заглушка для тестов (запуску вне тг)\n};\n\nconst getTgId = () => {\n  return getTelegramUserData().id;\n};\n\n// --- Функции для профиля пользователя ---\nexport const fetchUserProfile = async () => {\n  const tgUser = getTelegramUserData();\n  const params = new URLSearchParams({\n    tg_id: tgUser.id,\n  });\n  if (tgUser.username) params.append('tg_username', tgUser.username);\n  if (tgUser.first_name) params.append('tg_first_name', tgUser.first_name);\n  if (tgUser.last_name) params.append('tg_last_name', tgUser.last_name);\n\n  const response = await fetch(`${API_URL}/users/profile?${params.toString()}`);\n  if (!response.ok) {\n    const error = await response.json().catch(() => ({}));\n    throw new Error(error.detail || 'Ошибка загрузки профиля пользователя');\n  }\n  return await response.json(); // Ожидаем UserProfileResponse\n};\n\nexport const updateUserProfile = async (displayName) => {\n  const tgUser = getTelegramUserData();\n  const response = await fetch(`${API_URL}/users/profile`, {\n    method: 'PUT',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({\n      tg_id: tgUser.id,\n      display_name: displayName,\n      // Передаем актуальные данные из Telegram, если они могли измениться\n      telegram_username: tgUser.username,\n      telegram_first_name: tgUser.first_name,\n      telegram_last_name: tgUser.last_name,\n    }),\n  });\n  if (!response.ok) {\n    const error = await response.json().catch(() => ({}));\n    throw new Error(error.detail || 'Ошибка обновления профиля');\n  }\n  return await response.json(); // Ожидаем UserProfileResponse\n};\n\n\n// --- Основные функции бронирования ---\nexport const fetchOffices = async () => {\n  const response = await fetch(`${API_URL}/offices`);\n  if (!response.ok) throw new Error('Ошибка загрузки офисов');\n  return await response.json();\n};\n\nexport const fetchDesks = async (officeId, date) => {\n  const dateStr = date.toISOString().split('T')[0];\n  const response = await fetch(`${API_URL}/desks/${officeId}?date_str=${dateStr}`); \n  if (!response.ok) {\n    const error = await response.json().catch(() => ({}));\n    throw new Error(error.detail || 'Ошибка загрузки столов');\n  }\n  const desks = await response.json();\n  // Ответ теперь содержит user_display_name вместо tg_id в availability_slots\n  // { id, ..., availability_slots: { AM: {status, user_display_name}, PM: {status, user_display_name} } }\n  return desks; \n};\n\nexport const bookDesk = async (deskId, date, timeSlot) => {\n  const tgUser = getTelegramUserData();\n  const response = await fetch(`${API_URL}/book`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({\n      desk_id: parseInt(deskId),\n      tg_id: tgUser.id,\n      booking_date: date.toISOString().split('T')[0],\n      time_slot: timeSlot,\n      // Передаем данные Telegram для get_or_create_user на бэкенде\n      telegram_username: tgUser.username,\n      telegram_first_name: tgUser.first_name,\n      telegram_last_name: tgUser.last_name,\n    })\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.detail || 'Ошибка бронирования');\n  }\n  // Бэкенд теперь возвращает BookingResponse с user_display_name\n  return await response.json(); \n};\n\nexport const fetchUserBookings = async (startDate = null, endDate = null) => {\n  let url = `${API_URL}/my-bookings?tg_id=${getTgId()}`;\n  if (startDate) url += `&start_date=${startDate.toISOString().split('T')[0]}`;\n  if (endDate) url += `&end_date=${endDate.toISOString().split('T')[0]}`;\n\n  const response = await fetch(url);\n  if (!response.ok) throw new Error('Ошибка загрузки бронирований');\n  // Бэкенд возвращает BookingResponse с user_display_name\n  return await response.json(); \n};\n\nexport const cancelUserBooking = async (bookingId) => {\n  const response = await fetch(`${API_URL}/cancel-booking`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({\n      booking_id: parseInt(bookingId),\n      tg_id: getTgId() // tg_id нужен для проверки прав на отмену\n    })\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.detail || 'Ошибка отмены бронирования');\n  }\n  return true;\n};\n\n// --- Админские функции ---\n// Передаем tg_id админа как параметр запроса\nconst getAdminTgIdParam = () => `tg_id_admin=${getTgId()}`;\n\nexport const addNewDesk = async (officeId, deskName) => {\n  const response = await fetch(`${API_URL}/admin/add-desk?${getAdminTgIdParam()}`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({\n      office_id: parseInt(officeId),\n      desk_name: deskName,\n      // tg_id убран из тела, так как передается в параметрах для проверки админа\n    })\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.detail || 'Ошибка добавления стола');\n  }\n  return await response.json();\n};\n\nexport const deleteDesk = async (deskId) => {\n  const response = await fetch(`${API_URL}/admin/remove-desk?${getAdminTgIdParam()}`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({\n      desk_id: parseInt(deskId),\n    })\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.detail || 'Ошибка удаления стола');\n  }\n  return true;\n};\n\nexport const addNewOffice = async (officeName) => {\n  const response = await fetch(`${API_URL}/admin/add-office?${getAdminTgIdParam()}`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({\n      name: officeName,\n    })\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.detail || 'Ошибка добавления офиса');\n  }\n  return await response.json();\n};\n\nexport const deleteOffice = async (officeId) => {\n  const response = await fetch(`${API_URL}/admin/remove-office?${getAdminTgIdParam()}`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({\n      office_id: parseInt(officeId),\n    })\n  });\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.detail || 'Ошибка удаления офиса');\n  }\n  return true;\n};\n\nexport const fetchAdminDesks = async () => {\n  const url = `${API_URL}/admin/desks?${getAdminTgIdParam()}`;\n  const response = await fetch(url);\n  if (!response.ok) throw new Error('Ошибка загрузки столов для админа');\n  // Ответ AdminDeskResponse не содержит status, но содержит office_name\n  return await response.json();\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}